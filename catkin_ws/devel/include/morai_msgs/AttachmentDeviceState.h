// Generated by gencpp from file morai_msgs/AttachmentDeviceState.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_ATTACHMENTDEVICESTATE_H
#define MORAI_MSGS_MESSAGE_ATTACHMENTDEVICESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct AttachmentDeviceState_
{
  typedef AttachmentDeviceState_<ContainerAllocator> Type;

  AttachmentDeviceState_()
    : sensor1(0)
    , sensor2(0)
    , sensor3(0)
    , sensor4(0)  {
    }
  AttachmentDeviceState_(const ContainerAllocator& _alloc)
    : sensor1(0)
    , sensor2(0)
    , sensor3(0)
    , sensor4(0)  {
  (void)_alloc;
    }



   typedef int32_t _sensor1_type;
  _sensor1_type sensor1;

   typedef int32_t _sensor2_type;
  _sensor2_type sensor2;

   typedef int32_t _sensor3_type;
  _sensor3_type sensor3;

   typedef int32_t _sensor4_type;
  _sensor4_type sensor4;





  typedef boost::shared_ptr< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> const> ConstPtr;

}; // struct AttachmentDeviceState_

typedef ::morai_msgs::AttachmentDeviceState_<std::allocator<void> > AttachmentDeviceState;

typedef boost::shared_ptr< ::morai_msgs::AttachmentDeviceState > AttachmentDeviceStatePtr;
typedef boost::shared_ptr< ::morai_msgs::AttachmentDeviceState const> AttachmentDeviceStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::AttachmentDeviceState_<ContainerAllocator1> & lhs, const ::morai_msgs::AttachmentDeviceState_<ContainerAllocator2> & rhs)
{
  return lhs.sensor1 == rhs.sensor1 &&
    lhs.sensor2 == rhs.sensor2 &&
    lhs.sensor3 == rhs.sensor3 &&
    lhs.sensor4 == rhs.sensor4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::AttachmentDeviceState_<ContainerAllocator1> & lhs, const ::morai_msgs::AttachmentDeviceState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28db62a0887dae3362a1a7153c82b912";
  }

  static const char* value(const ::morai_msgs::AttachmentDeviceState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28db62a0887dae33ULL;
  static const uint64_t static_value2 = 0x62a1a7153c82b912ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/AttachmentDeviceState";
  }

  static const char* value(const ::morai_msgs::AttachmentDeviceState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 sensor1\n"
"int32 sensor2\n"
"int32 sensor3\n"
"int32 sensor4\n"
;
  }

  static const char* value(const ::morai_msgs::AttachmentDeviceState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor1);
      stream.next(m.sensor2);
      stream.next(m.sensor3);
      stream.next(m.sensor4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AttachmentDeviceState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::AttachmentDeviceState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::AttachmentDeviceState_<ContainerAllocator>& v)
  {
    s << indent << "sensor1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor1);
    s << indent << "sensor2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor2);
    s << indent << "sensor3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor3);
    s << indent << "sensor4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_ATTACHMENTDEVICESTATE_H
