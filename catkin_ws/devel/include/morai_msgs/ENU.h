// Generated by gencpp from file morai_msgs/ENU.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_ENU_H
#define MORAI_MSGS_MESSAGE_ENU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct ENU_
{
  typedef ENU_<ContainerAllocator> Type;

  ENU_()
    : east(0.0)
    , north(0.0)
    , up(0.0)  {
    }
  ENU_(const ContainerAllocator& _alloc)
    : east(0.0)
    , north(0.0)
    , up(0.0)  {
  (void)_alloc;
    }



   typedef float _east_type;
  _east_type east;

   typedef float _north_type;
  _north_type north;

   typedef float _up_type;
  _up_type up;





  typedef boost::shared_ptr< ::morai_msgs::ENU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::ENU_<ContainerAllocator> const> ConstPtr;

}; // struct ENU_

typedef ::morai_msgs::ENU_<std::allocator<void> > ENU;

typedef boost::shared_ptr< ::morai_msgs::ENU > ENUPtr;
typedef boost::shared_ptr< ::morai_msgs::ENU const> ENUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::ENU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::ENU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::ENU_<ContainerAllocator1> & lhs, const ::morai_msgs::ENU_<ContainerAllocator2> & rhs)
{
  return lhs.east == rhs.east &&
    lhs.north == rhs.north &&
    lhs.up == rhs.up;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::ENU_<ContainerAllocator1> & lhs, const ::morai_msgs::ENU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ENU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ENU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ENU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ENU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ENU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ENU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::ENU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c90797f354fb2a735756281dc238dc87";
  }

  static const char* value(const ::morai_msgs::ENU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc90797f354fb2a73ULL;
  static const uint64_t static_value2 = 0x5756281dc238dc87ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::ENU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/ENU";
  }

  static const char* value(const ::morai_msgs::ENU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::ENU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 east\n"
"float32 north\n"
"float32 up\n"
;
  }

  static const char* value(const ::morai_msgs::ENU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::ENU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.east);
      stream.next(m.north);
      stream.next(m.up);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ENU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::ENU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::ENU_<ContainerAllocator>& v)
  {
    s << indent << "east: ";
    Printer<float>::stream(s, indent + "  ", v.east);
    s << indent << "north: ";
    Printer<float>::stream(s, indent + "  ", v.north);
    s << indent << "up: ";
    Printer<float>::stream(s, indent + "  ", v.up);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_ENU_H
