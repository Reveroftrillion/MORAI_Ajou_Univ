// Generated by gencpp from file morai_msgs/MSITCustomMessage.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_MSITCUSTOMMESSAGE_H
#define MORAI_MSGS_MESSAGE_MSITCUSTOMMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct MSITCustomMessage_
{
  typedef MSITCustomMessage_<ContainerAllocator> Type;

  MSITCustomMessage_()
    : position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_z(0.0)
    , acceleration_x(0.0)
    , acceleration_y(0.0)
    , acceleration_z(0.0)
    , max_lateral_acceleration(0.0)
    , yaw_angle(0.0)
    , front_wheel_angle(0.0)
    , throttle(0.0)
    , brake(0.0)
    , TTC(0.0)
    , width(0.0)
    , height(0.0)
    , fallback_trigger(false)
    , MRM_select_info(0)
    , is_collision(false)
    , way_off_distance(0.0)
    , sur_way_off_distance()  {
    }
  MSITCustomMessage_(const ContainerAllocator& _alloc)
    : position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_z(0.0)
    , acceleration_x(0.0)
    , acceleration_y(0.0)
    , acceleration_z(0.0)
    , max_lateral_acceleration(0.0)
    , yaw_angle(0.0)
    , front_wheel_angle(0.0)
    , throttle(0.0)
    , brake(0.0)
    , TTC(0.0)
    , width(0.0)
    , height(0.0)
    , fallback_trigger(false)
    , MRM_select_info(0)
    , is_collision(false)
    , way_off_distance(0.0)
    , sur_way_off_distance(_alloc)  {
  (void)_alloc;
    }



   typedef float _position_x_type;
  _position_x_type position_x;

   typedef float _position_y_type;
  _position_y_type position_y;

   typedef float _position_z_type;
  _position_z_type position_z;

   typedef float _velocity_x_type;
  _velocity_x_type velocity_x;

   typedef float _velocity_y_type;
  _velocity_y_type velocity_y;

   typedef float _velocity_z_type;
  _velocity_z_type velocity_z;

   typedef float _acceleration_x_type;
  _acceleration_x_type acceleration_x;

   typedef float _acceleration_y_type;
  _acceleration_y_type acceleration_y;

   typedef float _acceleration_z_type;
  _acceleration_z_type acceleration_z;

   typedef float _max_lateral_acceleration_type;
  _max_lateral_acceleration_type max_lateral_acceleration;

   typedef float _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef float _front_wheel_angle_type;
  _front_wheel_angle_type front_wheel_angle;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _brake_type;
  _brake_type brake;

   typedef float _TTC_type;
  _TTC_type TTC;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef uint8_t _fallback_trigger_type;
  _fallback_trigger_type fallback_trigger;

   typedef int32_t _MRM_select_info_type;
  _MRM_select_info_type MRM_select_info;

   typedef uint8_t _is_collision_type;
  _is_collision_type is_collision;

   typedef float _way_off_distance_type;
  _way_off_distance_type way_off_distance;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _sur_way_off_distance_type;
  _sur_way_off_distance_type sur_way_off_distance;





  typedef boost::shared_ptr< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> const> ConstPtr;

}; // struct MSITCustomMessage_

typedef ::morai_msgs::MSITCustomMessage_<std::allocator<void> > MSITCustomMessage;

typedef boost::shared_ptr< ::morai_msgs::MSITCustomMessage > MSITCustomMessagePtr;
typedef boost::shared_ptr< ::morai_msgs::MSITCustomMessage const> MSITCustomMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::MSITCustomMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::MSITCustomMessage_<ContainerAllocator1> & lhs, const ::morai_msgs::MSITCustomMessage_<ContainerAllocator2> & rhs)
{
  return lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.position_z == rhs.position_z &&
    lhs.velocity_x == rhs.velocity_x &&
    lhs.velocity_y == rhs.velocity_y &&
    lhs.velocity_z == rhs.velocity_z &&
    lhs.acceleration_x == rhs.acceleration_x &&
    lhs.acceleration_y == rhs.acceleration_y &&
    lhs.acceleration_z == rhs.acceleration_z &&
    lhs.max_lateral_acceleration == rhs.max_lateral_acceleration &&
    lhs.yaw_angle == rhs.yaw_angle &&
    lhs.front_wheel_angle == rhs.front_wheel_angle &&
    lhs.throttle == rhs.throttle &&
    lhs.brake == rhs.brake &&
    lhs.TTC == rhs.TTC &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.fallback_trigger == rhs.fallback_trigger &&
    lhs.MRM_select_info == rhs.MRM_select_info &&
    lhs.is_collision == rhs.is_collision &&
    lhs.way_off_distance == rhs.way_off_distance &&
    lhs.sur_way_off_distance == rhs.sur_way_off_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::MSITCustomMessage_<ContainerAllocator1> & lhs, const ::morai_msgs::MSITCustomMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f4eb9640f94fd0ad3eb006965c55b6b";
  }

  static const char* value(const ::morai_msgs::MSITCustomMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f4eb9640f94fd0aULL;
  static const uint64_t static_value2 = 0xd3eb006965c55b6bULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/MSITCustomMessage";
  }

  static const char* value(const ::morai_msgs::MSITCustomMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 position_x\n"
"float32 position_y\n"
"float32 position_z\n"
"float32 velocity_x\n"
"float32 velocity_y\n"
"float32 velocity_z\n"
"float32 acceleration_x\n"
"float32 acceleration_y\n"
"float32 acceleration_z\n"
"float32 max_lateral_acceleration\n"
"float32 yaw_angle\n"
"float32 front_wheel_angle\n"
"float32 throttle\n"
"float32 brake\n"
"float32 TTC\n"
"float32 width\n"
"float32 height\n"
"bool fallback_trigger\n"
"int32 MRM_select_info\n"
"bool is_collision\n"
"float32 way_off_distance\n"
"float32[] sur_way_off_distance\n"
;
  }

  static const char* value(const ::morai_msgs::MSITCustomMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.velocity_x);
      stream.next(m.velocity_y);
      stream.next(m.velocity_z);
      stream.next(m.acceleration_x);
      stream.next(m.acceleration_y);
      stream.next(m.acceleration_z);
      stream.next(m.max_lateral_acceleration);
      stream.next(m.yaw_angle);
      stream.next(m.front_wheel_angle);
      stream.next(m.throttle);
      stream.next(m.brake);
      stream.next(m.TTC);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.fallback_trigger);
      stream.next(m.MRM_select_info);
      stream.next(m.is_collision);
      stream.next(m.way_off_distance);
      stream.next(m.sur_way_off_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MSITCustomMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::MSITCustomMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::MSITCustomMessage_<ContainerAllocator>& v)
  {
    s << indent << "position_x: ";
    Printer<float>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<float>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<float>::stream(s, indent + "  ", v.position_z);
    s << indent << "velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_x);
    s << indent << "velocity_y: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_y);
    s << indent << "velocity_z: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_z);
    s << indent << "acceleration_x: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_x);
    s << indent << "acceleration_y: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_y);
    s << indent << "acceleration_z: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_z);
    s << indent << "max_lateral_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.max_lateral_acceleration);
    s << indent << "yaw_angle: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "front_wheel_angle: ";
    Printer<float>::stream(s, indent + "  ", v.front_wheel_angle);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<float>::stream(s, indent + "  ", v.brake);
    s << indent << "TTC: ";
    Printer<float>::stream(s, indent + "  ", v.TTC);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "fallback_trigger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fallback_trigger);
    s << indent << "MRM_select_info: ";
    Printer<int32_t>::stream(s, indent + "  ", v.MRM_select_info);
    s << indent << "is_collision: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_collision);
    s << indent << "way_off_distance: ";
    Printer<float>::stream(s, indent + "  ", v.way_off_distance);
    s << indent << "sur_way_off_distance[]" << std::endl;
    for (size_t i = 0; i < v.sur_way_off_distance.size(); ++i)
    {
      s << indent << "  sur_way_off_distance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sur_way_off_distance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_MSITCUSTOMMESSAGE_H
