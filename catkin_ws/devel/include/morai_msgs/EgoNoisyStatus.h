// Generated by gencpp from file morai_msgs/EgoNoisyStatus.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_EGONOISYSTATUS_H
#define MORAI_MSGS_MESSAGE_EGONOISYSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <morai_msgs/ENU.h>
#include <morai_msgs/RPY.h>
#include <morai_msgs/ENU.h>
#include <morai_msgs/XYZ.h>
#include <morai_msgs/RPY.h>
#include <morai_msgs/XYZ.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct EgoNoisyStatus_
{
  typedef EgoNoisyStatus_<ContainerAllocator> Type;

  EgoNoisyStatus_()
    : header()
    , noisy_position()
    , noisy_orientation()
    , noisy_enu_velocity()
    , noisy_velocity()
    , noisy_angularVelocity()
    , noisy_acceleration()
    , accel(0.0)
    , brake(0.0)
    , steer(0.0)  {
    }
  EgoNoisyStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , noisy_position(_alloc)
    , noisy_orientation(_alloc)
    , noisy_enu_velocity(_alloc)
    , noisy_velocity(_alloc)
    , noisy_angularVelocity(_alloc)
    , noisy_acceleration(_alloc)
    , accel(0.0)
    , brake(0.0)
    , steer(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::morai_msgs::ENU_<ContainerAllocator>  _noisy_position_type;
  _noisy_position_type noisy_position;

   typedef  ::morai_msgs::RPY_<ContainerAllocator>  _noisy_orientation_type;
  _noisy_orientation_type noisy_orientation;

   typedef  ::morai_msgs::ENU_<ContainerAllocator>  _noisy_enu_velocity_type;
  _noisy_enu_velocity_type noisy_enu_velocity;

   typedef  ::morai_msgs::XYZ_<ContainerAllocator>  _noisy_velocity_type;
  _noisy_velocity_type noisy_velocity;

   typedef  ::morai_msgs::RPY_<ContainerAllocator>  _noisy_angularVelocity_type;
  _noisy_angularVelocity_type noisy_angularVelocity;

   typedef  ::morai_msgs::XYZ_<ContainerAllocator>  _noisy_acceleration_type;
  _noisy_acceleration_type noisy_acceleration;

   typedef float _accel_type;
  _accel_type accel;

   typedef float _brake_type;
  _brake_type brake;

   typedef float _steer_type;
  _steer_type steer;





  typedef boost::shared_ptr< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> const> ConstPtr;

}; // struct EgoNoisyStatus_

typedef ::morai_msgs::EgoNoisyStatus_<std::allocator<void> > EgoNoisyStatus;

typedef boost::shared_ptr< ::morai_msgs::EgoNoisyStatus > EgoNoisyStatusPtr;
typedef boost::shared_ptr< ::morai_msgs::EgoNoisyStatus const> EgoNoisyStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::EgoNoisyStatus_<ContainerAllocator1> & lhs, const ::morai_msgs::EgoNoisyStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.noisy_position == rhs.noisy_position &&
    lhs.noisy_orientation == rhs.noisy_orientation &&
    lhs.noisy_enu_velocity == rhs.noisy_enu_velocity &&
    lhs.noisy_velocity == rhs.noisy_velocity &&
    lhs.noisy_angularVelocity == rhs.noisy_angularVelocity &&
    lhs.noisy_acceleration == rhs.noisy_acceleration &&
    lhs.accel == rhs.accel &&
    lhs.brake == rhs.brake &&
    lhs.steer == rhs.steer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::EgoNoisyStatus_<ContainerAllocator1> & lhs, const ::morai_msgs::EgoNoisyStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93b556ef5e38f8da38c67217e4fe4664";
  }

  static const char* value(const ::morai_msgs::EgoNoisyStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93b556ef5e38f8daULL;
  static const uint64_t static_value2 = 0x38c67217e4fe4664ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/EgoNoisyStatus";
  }

  static const char* value(const ::morai_msgs::EgoNoisyStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"morai_msgs/ENU noisy_position\n"
"morai_msgs/RPY noisy_orientation\n"
"morai_msgs/ENU noisy_enu_velocity\n"
"morai_msgs/XYZ noisy_velocity\n"
"morai_msgs/RPY noisy_angularVelocity\n"
"morai_msgs/XYZ noisy_acceleration\n"
"\n"
"float32 accel\n"
"float32 brake\n"
"float32 steer\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: morai_msgs/ENU\n"
"float32 east\n"
"float32 north\n"
"float32 up\n"
"\n"
"================================================================================\n"
"MSG: morai_msgs/RPY\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"\n"
"================================================================================\n"
"MSG: morai_msgs/XYZ\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::morai_msgs::EgoNoisyStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.noisy_position);
      stream.next(m.noisy_orientation);
      stream.next(m.noisy_enu_velocity);
      stream.next(m.noisy_velocity);
      stream.next(m.noisy_angularVelocity);
      stream.next(m.noisy_acceleration);
      stream.next(m.accel);
      stream.next(m.brake);
      stream.next(m.steer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoNoisyStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::EgoNoisyStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::EgoNoisyStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "noisy_position: ";
    s << std::endl;
    Printer< ::morai_msgs::ENU_<ContainerAllocator> >::stream(s, indent + "  ", v.noisy_position);
    s << indent << "noisy_orientation: ";
    s << std::endl;
    Printer< ::morai_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.noisy_orientation);
    s << indent << "noisy_enu_velocity: ";
    s << std::endl;
    Printer< ::morai_msgs::ENU_<ContainerAllocator> >::stream(s, indent + "  ", v.noisy_enu_velocity);
    s << indent << "noisy_velocity: ";
    s << std::endl;
    Printer< ::morai_msgs::XYZ_<ContainerAllocator> >::stream(s, indent + "  ", v.noisy_velocity);
    s << indent << "noisy_angularVelocity: ";
    s << std::endl;
    Printer< ::morai_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.noisy_angularVelocity);
    s << indent << "noisy_acceleration: ";
    s << std::endl;
    Printer< ::morai_msgs::XYZ_<ContainerAllocator> >::stream(s, indent + "  ", v.noisy_acceleration);
    s << indent << "accel: ";
    Printer<float>::stream(s, indent + "  ", v.accel);
    s << indent << "brake: ";
    Printer<float>::stream(s, indent + "  ", v.brake);
    s << indent << "steer: ";
    Printer<float>::stream(s, indent + "  ", v.steer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_EGONOISYSTATUS_H
