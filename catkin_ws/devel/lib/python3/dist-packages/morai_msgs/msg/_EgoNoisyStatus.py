# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/EgoNoisyStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import morai_msgs.msg
import std_msgs.msg

class EgoNoisyStatus(genpy.Message):
  _md5sum = "93b556ef5e38f8da38c67217e4fe4664"
  _type = "morai_msgs/EgoNoisyStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

morai_msgs/ENU noisy_position
morai_msgs/RPY noisy_orientation
morai_msgs/ENU noisy_enu_velocity
morai_msgs/XYZ noisy_velocity
morai_msgs/RPY noisy_angularVelocity
morai_msgs/XYZ noisy_acceleration

float32 accel
float32 brake
float32 steer

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: morai_msgs/ENU
float32 east
float32 north
float32 up

================================================================================
MSG: morai_msgs/RPY
float32 roll
float32 pitch
float32 yaw

================================================================================
MSG: morai_msgs/XYZ
float32 x
float32 y
float32 z
"""
  __slots__ = ['header','noisy_position','noisy_orientation','noisy_enu_velocity','noisy_velocity','noisy_angularVelocity','noisy_acceleration','accel','brake','steer']
  _slot_types = ['std_msgs/Header','morai_msgs/ENU','morai_msgs/RPY','morai_msgs/ENU','morai_msgs/XYZ','morai_msgs/RPY','morai_msgs/XYZ','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,noisy_position,noisy_orientation,noisy_enu_velocity,noisy_velocity,noisy_angularVelocity,noisy_acceleration,accel,brake,steer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EgoNoisyStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.noisy_position is None:
        self.noisy_position = morai_msgs.msg.ENU()
      if self.noisy_orientation is None:
        self.noisy_orientation = morai_msgs.msg.RPY()
      if self.noisy_enu_velocity is None:
        self.noisy_enu_velocity = morai_msgs.msg.ENU()
      if self.noisy_velocity is None:
        self.noisy_velocity = morai_msgs.msg.XYZ()
      if self.noisy_angularVelocity is None:
        self.noisy_angularVelocity = morai_msgs.msg.RPY()
      if self.noisy_acceleration is None:
        self.noisy_acceleration = morai_msgs.msg.XYZ()
      if self.accel is None:
        self.accel = 0.
      if self.brake is None:
        self.brake = 0.
      if self.steer is None:
        self.steer = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.noisy_position = morai_msgs.msg.ENU()
      self.noisy_orientation = morai_msgs.msg.RPY()
      self.noisy_enu_velocity = morai_msgs.msg.ENU()
      self.noisy_velocity = morai_msgs.msg.XYZ()
      self.noisy_angularVelocity = morai_msgs.msg.RPY()
      self.noisy_acceleration = morai_msgs.msg.XYZ()
      self.accel = 0.
      self.brake = 0.
      self.steer = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_21f().pack(_x.noisy_position.east, _x.noisy_position.north, _x.noisy_position.up, _x.noisy_orientation.roll, _x.noisy_orientation.pitch, _x.noisy_orientation.yaw, _x.noisy_enu_velocity.east, _x.noisy_enu_velocity.north, _x.noisy_enu_velocity.up, _x.noisy_velocity.x, _x.noisy_velocity.y, _x.noisy_velocity.z, _x.noisy_angularVelocity.roll, _x.noisy_angularVelocity.pitch, _x.noisy_angularVelocity.yaw, _x.noisy_acceleration.x, _x.noisy_acceleration.y, _x.noisy_acceleration.z, _x.accel, _x.brake, _x.steer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.noisy_position is None:
        self.noisy_position = morai_msgs.msg.ENU()
      if self.noisy_orientation is None:
        self.noisy_orientation = morai_msgs.msg.RPY()
      if self.noisy_enu_velocity is None:
        self.noisy_enu_velocity = morai_msgs.msg.ENU()
      if self.noisy_velocity is None:
        self.noisy_velocity = morai_msgs.msg.XYZ()
      if self.noisy_angularVelocity is None:
        self.noisy_angularVelocity = morai_msgs.msg.RPY()
      if self.noisy_acceleration is None:
        self.noisy_acceleration = morai_msgs.msg.XYZ()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.noisy_position.east, _x.noisy_position.north, _x.noisy_position.up, _x.noisy_orientation.roll, _x.noisy_orientation.pitch, _x.noisy_orientation.yaw, _x.noisy_enu_velocity.east, _x.noisy_enu_velocity.north, _x.noisy_enu_velocity.up, _x.noisy_velocity.x, _x.noisy_velocity.y, _x.noisy_velocity.z, _x.noisy_angularVelocity.roll, _x.noisy_angularVelocity.pitch, _x.noisy_angularVelocity.yaw, _x.noisy_acceleration.x, _x.noisy_acceleration.y, _x.noisy_acceleration.z, _x.accel, _x.brake, _x.steer,) = _get_struct_21f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_21f().pack(_x.noisy_position.east, _x.noisy_position.north, _x.noisy_position.up, _x.noisy_orientation.roll, _x.noisy_orientation.pitch, _x.noisy_orientation.yaw, _x.noisy_enu_velocity.east, _x.noisy_enu_velocity.north, _x.noisy_enu_velocity.up, _x.noisy_velocity.x, _x.noisy_velocity.y, _x.noisy_velocity.z, _x.noisy_angularVelocity.roll, _x.noisy_angularVelocity.pitch, _x.noisy_angularVelocity.yaw, _x.noisy_acceleration.x, _x.noisy_acceleration.y, _x.noisy_acceleration.z, _x.accel, _x.brake, _x.steer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.noisy_position is None:
        self.noisy_position = morai_msgs.msg.ENU()
      if self.noisy_orientation is None:
        self.noisy_orientation = morai_msgs.msg.RPY()
      if self.noisy_enu_velocity is None:
        self.noisy_enu_velocity = morai_msgs.msg.ENU()
      if self.noisy_velocity is None:
        self.noisy_velocity = morai_msgs.msg.XYZ()
      if self.noisy_angularVelocity is None:
        self.noisy_angularVelocity = morai_msgs.msg.RPY()
      if self.noisy_acceleration is None:
        self.noisy_acceleration = morai_msgs.msg.XYZ()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.noisy_position.east, _x.noisy_position.north, _x.noisy_position.up, _x.noisy_orientation.roll, _x.noisy_orientation.pitch, _x.noisy_orientation.yaw, _x.noisy_enu_velocity.east, _x.noisy_enu_velocity.north, _x.noisy_enu_velocity.up, _x.noisy_velocity.x, _x.noisy_velocity.y, _x.noisy_velocity.z, _x.noisy_angularVelocity.roll, _x.noisy_angularVelocity.pitch, _x.noisy_angularVelocity.yaw, _x.noisy_acceleration.x, _x.noisy_acceleration.y, _x.noisy_acceleration.z, _x.accel, _x.brake, _x.steer,) = _get_struct_21f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_21f = None
def _get_struct_21f():
    global _struct_21f
    if _struct_21f is None:
        _struct_21f = struct.Struct("<21f")
    return _struct_21f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
