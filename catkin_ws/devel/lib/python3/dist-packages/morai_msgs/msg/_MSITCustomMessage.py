# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/MSITCustomMessage.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MSITCustomMessage(genpy.Message):
  _md5sum = "8f4eb9640f94fd0ad3eb006965c55b6b"
  _type = "morai_msgs/MSITCustomMessage"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 position_x
float32 position_y
float32 position_z
float32 velocity_x
float32 velocity_y
float32 velocity_z
float32 acceleration_x
float32 acceleration_y
float32 acceleration_z
float32 max_lateral_acceleration
float32 yaw_angle
float32 front_wheel_angle
float32 throttle
float32 brake
float32 TTC
float32 width
float32 height
bool fallback_trigger
int32 MRM_select_info
bool is_collision
float32 way_off_distance
float32[] sur_way_off_distance"""
  __slots__ = ['position_x','position_y','position_z','velocity_x','velocity_y','velocity_z','acceleration_x','acceleration_y','acceleration_z','max_lateral_acceleration','yaw_angle','front_wheel_angle','throttle','brake','TTC','width','height','fallback_trigger','MRM_select_info','is_collision','way_off_distance','sur_way_off_distance']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','int32','bool','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_x,position_y,position_z,velocity_x,velocity_y,velocity_z,acceleration_x,acceleration_y,acceleration_z,max_lateral_acceleration,yaw_angle,front_wheel_angle,throttle,brake,TTC,width,height,fallback_trigger,MRM_select_info,is_collision,way_off_distance,sur_way_off_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MSITCustomMessage, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position_x is None:
        self.position_x = 0.
      if self.position_y is None:
        self.position_y = 0.
      if self.position_z is None:
        self.position_z = 0.
      if self.velocity_x is None:
        self.velocity_x = 0.
      if self.velocity_y is None:
        self.velocity_y = 0.
      if self.velocity_z is None:
        self.velocity_z = 0.
      if self.acceleration_x is None:
        self.acceleration_x = 0.
      if self.acceleration_y is None:
        self.acceleration_y = 0.
      if self.acceleration_z is None:
        self.acceleration_z = 0.
      if self.max_lateral_acceleration is None:
        self.max_lateral_acceleration = 0.
      if self.yaw_angle is None:
        self.yaw_angle = 0.
      if self.front_wheel_angle is None:
        self.front_wheel_angle = 0.
      if self.throttle is None:
        self.throttle = 0.
      if self.brake is None:
        self.brake = 0.
      if self.TTC is None:
        self.TTC = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.fallback_trigger is None:
        self.fallback_trigger = False
      if self.MRM_select_info is None:
        self.MRM_select_info = 0
      if self.is_collision is None:
        self.is_collision = False
      if self.way_off_distance is None:
        self.way_off_distance = 0.
      if self.sur_way_off_distance is None:
        self.sur_way_off_distance = []
    else:
      self.position_x = 0.
      self.position_y = 0.
      self.position_z = 0.
      self.velocity_x = 0.
      self.velocity_y = 0.
      self.velocity_z = 0.
      self.acceleration_x = 0.
      self.acceleration_y = 0.
      self.acceleration_z = 0.
      self.max_lateral_acceleration = 0.
      self.yaw_angle = 0.
      self.front_wheel_angle = 0.
      self.throttle = 0.
      self.brake = 0.
      self.TTC = 0.
      self.width = 0.
      self.height = 0.
      self.fallback_trigger = False
      self.MRM_select_info = 0
      self.is_collision = False
      self.way_off_distance = 0.
      self.sur_way_off_distance = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17fBiBf().pack(_x.position_x, _x.position_y, _x.position_z, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.acceleration_x, _x.acceleration_y, _x.acceleration_z, _x.max_lateral_acceleration, _x.yaw_angle, _x.front_wheel_angle, _x.throttle, _x.brake, _x.TTC, _x.width, _x.height, _x.fallback_trigger, _x.MRM_select_info, _x.is_collision, _x.way_off_distance))
      length = len(self.sur_way_off_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.sur_way_off_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 78
      (_x.position_x, _x.position_y, _x.position_z, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.acceleration_x, _x.acceleration_y, _x.acceleration_z, _x.max_lateral_acceleration, _x.yaw_angle, _x.front_wheel_angle, _x.throttle, _x.brake, _x.TTC, _x.width, _x.height, _x.fallback_trigger, _x.MRM_select_info, _x.is_collision, _x.way_off_distance,) = _get_struct_17fBiBf().unpack(str[start:end])
      self.fallback_trigger = bool(self.fallback_trigger)
      self.is_collision = bool(self.is_collision)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sur_way_off_distance = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17fBiBf().pack(_x.position_x, _x.position_y, _x.position_z, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.acceleration_x, _x.acceleration_y, _x.acceleration_z, _x.max_lateral_acceleration, _x.yaw_angle, _x.front_wheel_angle, _x.throttle, _x.brake, _x.TTC, _x.width, _x.height, _x.fallback_trigger, _x.MRM_select_info, _x.is_collision, _x.way_off_distance))
      length = len(self.sur_way_off_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sur_way_off_distance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 78
      (_x.position_x, _x.position_y, _x.position_z, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.acceleration_x, _x.acceleration_y, _x.acceleration_z, _x.max_lateral_acceleration, _x.yaw_angle, _x.front_wheel_angle, _x.throttle, _x.brake, _x.TTC, _x.width, _x.height, _x.fallback_trigger, _x.MRM_select_info, _x.is_collision, _x.way_off_distance,) = _get_struct_17fBiBf().unpack(str[start:end])
      self.fallback_trigger = bool(self.fallback_trigger)
      self.is_collision = bool(self.is_collision)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sur_way_off_distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17fBiBf = None
def _get_struct_17fBiBf():
    global _struct_17fBiBf
    if _struct_17fBiBf is None:
        _struct_17fBiBf = struct.Struct("<17fBiBf")
    return _struct_17fBiBf
